<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Banco de Dados DANFE + Correção de Etiquetas</title>
  <style>
    body {
      font-family: sans-serif;
      max-width: 800px;
      margin: auto;
      padding: 20px;
    }
    textarea {
      width: 100%;
      height: 200px;
      margin-top: 10px;
    }
    button {
      padding: 10px 20px;
      margin-top: 10px;
      margin-right: 10px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f4f4f4;
    }
    pre {
      background: #eee;
      padding: 10px;
      white-space: pre-wrap;
      max-height: 300px;
      overflow: auto;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h2>Banco de Dados DANFE + Correção de Etiquetas</h2>

  <input type="file" id="fileInput" multiple accept=".txt"><br>
  <button onclick="processarArquivos()">Extrair Dados DANFE</button>
  <button onclick="corrigirEtiquetas()">Corrigir Etiquetas de Envio</button>
  <button onclick="baixarEtiquetasCorrigidas()">Baixar Etiquetas Corrigidas</button>

  <h3>Banco de Dados Extraído</h3>
  <table id="tabelaDados">
    <thead>
      <tr>
        <th>Número NF-e</th>
        <th>SKU / Código</th>
        <th>Quantidade</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <h3>Pré-visualização das Etiquetas Corrigidas</h3>
  <pre id="previewZPL">Nenhuma etiqueta corrigida ainda.</pre>

  <script>
    let dadosDanfe = {};
    let etiquetasOriginais = [];
    let etiquetasCorrigidas = '';

    function extrairCamposFD(texto) {
      const matches = [...texto.matchAll(/\^FD(.*?)\^FS/g)];
      return matches.map(m => m[1]).join('\n');
    }

    function processarArquivos() {
      const input = document.getElementById('fileInput');
      if (!input.files.length) return alert('Selecione pelo menos um arquivo .txt');

      const tabela = document.getElementById('tabelaDados').querySelector('tbody');
      tabela.innerHTML = '';
      dadosDanfe = {};
      etiquetasOriginais = [];
      etiquetasCorrigidas = '';
      document.getElementById('previewZPL').textContent = 'Nenhuma etiqueta corrigida ainda.';

      const leitores = [...input.files].map(file => {
        return new Promise(resolve => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.readAsText(file);
        });
      });

      Promise.all(leitores).then(resultados => {
        resultados.forEach(textoCompleto => {
          const blocos = textoCompleto.split(/\^XZ\s*\^XA/).map((bloco, i) => (i === 0 ? bloco : '^XA' + bloco));

          blocos.forEach(bloco => {
            const texto = extrairCamposFD(bloco);
            const linhas = texto.split('\n');

            const nfMatch = texto.match(/NF[e]?:[:#\s-]*0*(\d{4,6})/i);
            const nota = nfMatch ? nfMatch[1] : null;

            const isDanfe = /DANFE/i.test(texto);
            if (isDanfe && nota) {
              dadosDanfe[nota] = [];
              linhas.forEach(linha => {
                const qtMatch = linha.match(/(\d{1,3},\d{2})\s*(KIT|UNIDADE|UN)/i);
                const skuMatch = linha.match(/^([A-Z0-9\- ]{3,})\s*-\s*/);

                if (qtMatch && skuMatch) {
                  const qtd = qtMatch[1] + ' ' + qtMatch[2];
                  const sku = skuMatch[1].trim();
                  dadosDanfe[nota].push({ sku, qtd });

                  const tr = document.createElement('tr');
                  tr.innerHTML = `<td>${nota}</td><td>${sku}</td><td>${qtd}</td>`;
                  tabela.appendChild(tr);
                }
              });
            } else {
              etiquetasOriginais.push({ nota, bloco });
            }
          });
        });
      });
    }

    function corrigirEtiquetas() {
      etiquetasCorrigidas = '';
      etiquetasOriginais.forEach(({ nota, bloco }) => {
        if (nota && dadosDanfe[nota]) {
          const linhaUnica = dadosDanfe[nota]
            .map(item => `SKU: ${item.sku} - QT: ${item.qtd}`)
            .join(' | ');

          const comandoZPL = `^FO0,220^A0R,22,22^FB700,2,0,L^FD${linhaUnica}^FS\n`;

          const posXA = bloco.indexOf('^XA');
          if (posXA !== -1) {
            const before = bloco.slice(0, posXA + 3);
            const after = bloco.slice(posXA + 3);
            bloco = before + '\n' + comandoZPL + after;
          } else {
            bloco = comandoZPL + bloco;
          }
        }
        etiquetasCorrigidas += bloco.trim() + '\n^XZ\n';
      });

      document.getElementById('previewZPL').textContent = etiquetasCorrigidas || 'Nenhuma etiqueta corrigida disponível.';
    }

    function baixarEtiquetasCorrigidas() {
      if (!etiquetasCorrigidas) return alert('Nenhuma etiqueta corrigida disponível');
      const blob = new Blob([etiquetasCorrigidas], { type: 'text/plain' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = 'etiquetas_corrigidas.txt';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  </script>
</body>
</html>